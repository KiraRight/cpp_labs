package hiswt;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;

public class PrtogramForPrintOnPrinter {
	public static Shell ConfigureShell(Display display, Human human) {
		Shell shell = new Shell(display, SWT.SHELL_TRIM & (~SWT.RESIZE));
		shell.setText("Let's print!");
		shell.setSize(300, 100);
		shell.setLayout(new GridLayout(3,false));
		GridData gridData = new GridData();
		gridData.horizontalAlignment = GridData.FILL;
		gridData.grabExcessHorizontalSpace = true;
		Label putLabel = new Label(shell, SWT.LEFT);
		putLabel.setText("Принтер не заправлен");
		Button putButton = new Button(shell, SWT.PUSH);
		putButton.setText("Заправить");
		new Label(shell, SWT.NONE);
		Button printButton = new Button(shell, SWT.PUSH);
		printButton.setText("Печатать");
		Combo kindOfPrint = new Combo(shell, SWT.NULL);
		kindOfPrint.setItems(new String [] {"text","image"});
		/*Button printTextButton = new Button(shell, SWT.PUSH);
		printTextButton.setText("Печать текст");
		Button printImageButton = new Button(shell, SWT.PUSH);
		printImageButton.setText("Печать изображение");*/
		gridData = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
		gridData.horizontalSpan = 3;
		Label controlLabel = new Label(shell, SWT.LEFT);
		controlLabel.setText("Контроль");
		controlLabel.setLayoutData(gridData);
		
		putButton.addListener(SWT.Selection, new Listener()
		{
			public void handleEvent(Event event)
			{
				human.PutPaper();
				if(human.CheckPaperInPrinter())
				{
					putLabel.setText("Принтер заправлен");
					putLabel.getParent().layout();	
				}
				}
			});
		printButton.addListener(SWT.Selection, new Listener()
		{
			public void handleEvent(Event event)
			{
				String text = new String(kindOfPrint.getText());
				if(text!="")
				{
					if(human.Print(text))
					{
						controlLabel.setText("Заберите " + text);
						controlLabel.getParent().layout();
					}
					else
					{
						controlLabel.setText("Данный запрос не может быть исполнен");
						controlLabel.getParent().layout();
					}
				}
				else
				{
					controlLabel.setText("Выберите способ печати");
					controlLabel.getParent().layout();
				}
					
				}
			});
		/*printImageButton.addListener(SWT.Selection, new Listener()
		{
			public void handleEvent(Event event)
			{
				if(human.CheckPaperInPrinter())
				{
					human.Print("image");
					controlLabel.setText("Изображение распечатано");
					controlLabel.getParent().layout();
				}
				else
				{
					controlLabel.setText("Заправьте принтер");
					controlLabel.getParent().layout();
				}
			}
			});*/
		return shell;
		}

	public static void main(String[] args) {
		Display display = new Display();
		Human human = new Human();
		Shell shell = ConfigureShell(display, human);
		shell.pack();
		shell.open();
		while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
		}
		}
	}
